// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Teacher  @map("Profesor")
  Preparer @map("Preparador")
  Student  @map("Estudiante")
  Admin    @map("Administrador")
}

enum State {
  Active
  Inactive
}

model Nationality {
  id          Int     @id @default(autoincrement())
  code        String  @unique //V o E 
  description String?
  user        User[] //Relacion de uno a muchos
}

model User {
  id                   Int              @id @default(autoincrement())
  name                 String
  username             String           @unique
  email                String           @unique
  password             String
  emailVerified        Boolean?         @default(false)
  type                 Role
  status               State
  content              String?
  birthdate            DateTime         @default(dbgenerated("CURRENT_TIMESTAMP"))
  nationality_id       Int // Clave foránea hacia Nationality
  nationality          Nationality      @relation(fields: [nationality_id], references: [id])
  names                Name[] // Relación de uno a muchos
  direction            Direction[] // Relación de uno a muchos
  questions_secret     QuestionSecret[]
  cedula               String           @unique @default("00000000")
  createdAt            DateTime?        @default(now())
  updateAt             DateTime?        @updatedAt
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  teacher_id           Int?
  teacher              User?            @relation("Teacher", fields: [teacher_id], references: [id], onDelete: Cascade)
  preparers            User[]           @relation("Teacher")
  subject_id           Int? // Clave foránea hacia Subject
  subject              Subject?         @relation("UserSubject", fields: [subject_id], references: [id]) // Materia asignada
  subjectsAsTeacher    Subject[]        @relation("TeacherToSubject") // Materias donde el usuario es profesor
  subjectsAsPreparer   Subject[]        @relation("PreparerToSubject") // Materias donde el usuario es preparador

  @@unique([email], map: "user_email_unique")
  @@map("user")
}

model Name {
  id             Int    @id @default(autoincrement())
  user_id        Int //Llave foranea hacia user
  first_name     String
  last_name      String
  first_surname  String
  second_surname String
  user           User   @relation(fields: [user_id], references: [id])
}

model Subject {
  id          Int        @id @default(autoincrement())
  name        String // Nombre de la materia
  teacher_id  Int // Clave foránea hacia el profesor
  teacher     User       @relation("TeacherToSubject", fields: [teacher_id], references: [id])
  preparer_id Int? // Clave foránea hacia el preparador (opcional)
  preparer    User?      @relation("PreparerToSubject", fields: [preparer_id], references: [id])
  materials   Material[]
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  users       User[]     @relation("UserSubject") // Relación de muchos a muchos
}

model Material {
  id         Int       @id @default(autoincrement())
  subject_id Int //Llave foranea hacia subject
  subject    Subject   @relation(fields: [subject_id], references: [id])
  file_url   String //Url del material
  type       String //Tipo de material (pdf, video, imagen)
  createdAt  DateTime? @default(now())
}

model Direction {
  id      Int    @id @default(autoincrement())
  user_id Int //Llave foranea hacia user
  address String
  user    User   @relation(fields: [user_id], references: [id])
}

model QuestionSecret {
  id       Int    @id @default(autoincrement())
  user_id  Int //Llave foranea hacia user
  question String
  answer   String
  user     User   @relation(fields: [user_id], references: [id])
}
